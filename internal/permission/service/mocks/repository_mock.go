// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mocks/mock.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGetAuthorPostByID is a mock of GetAuthorPostByID interface.
type MockGetAuthorPostByID struct {
	ctrl     *gomock.Controller
	recorder *MockGetAuthorPostByIDMockRecorder
}

// MockGetAuthorPostByIDMockRecorder is the mock recorder for MockGetAuthorPostByID.
type MockGetAuthorPostByIDMockRecorder struct {
	mock *MockGetAuthorPostByID
}

// NewMockGetAuthorPostByID creates a new mock instance.
func NewMockGetAuthorPostByID(ctrl *gomock.Controller) *MockGetAuthorPostByID {
	mock := &MockGetAuthorPostByID{ctrl: ctrl}
	mock.recorder = &MockGetAuthorPostByIDMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetAuthorPostByID) EXPECT() *MockGetAuthorPostByIDMockRecorder {
	return m.recorder
}

// GetAuthorPostByID mocks base method.
func (m *MockGetAuthorPostByID) GetAuthorPostByID(ctx context.Context, id int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorPostByID", ctx, id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorPostByID indicates an expected call of GetAuthorPostByID.
func (mr *MockGetAuthorPostByIDMockRecorder) GetAuthorPostByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorPostByID", reflect.TypeOf((*MockGetAuthorPostByID)(nil).GetAuthorPostByID), ctx, id)
}
